"""Entry point script; implements CLI."""

import argparse
import msvcrt
import sys

import config
from src.pytorch_impl.src import classify as pyt_classify
from src.pytorch_impl.src import train as pyt_train
from src.tensorflow_impl.src import classify as tf_classify
from src.tensorflow_impl.src import train as tf_train


def training_prompt():
    """
    Prompts the user with a warning message about overwriting the saved model.
    """
    print('WARNING: Training will overwrite the saved model (if it exists). EXECUTE Y/N?')
    while True:
        resp = msvcrt.getch().decode().lower()
        if resp == 'y':
            print('Beginning training...')
            return
        elif resp == 'n':
            sys.exit('Training aborted.')
        else:
            print('Press either the Y or N key.')


def print_prediction(prediction):
    """
    Prints the predicted label(s) by the model to the screen.

    Parameters:
        - prediction (str or dict)
            - Prediction(s) generated by model.
            - Type depends on whether a single image or a directory of images was classified.
    """
    if type(prediction) == str:
        print('Prediction: {}'.format(prediction))
    elif type(prediction) == dict:
        keys, values = list(prediction.keys()), list(prediction.values())
        for key, value in zip(keys, values):
            print('{}: {}'.format(key, value))


def parse_arguments():
    """
    Parses the CLI for specific arguments via the `argparse` library.

    Returns:
        - A dictionary mapping each argument to the given value.
        - Each string value is lowercased to prevent case sensitivity issues.
    """
    # Specification for CLI args.
    description = 'See for help: https://github.com/MarxSoul55/cats_vs_dogs/wiki'
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('--train', action='store_true')
    parser.add_argument('--resuming', action='store_true')
    parser.add_argument('--steps', type=int)
    parser.add_argument('--classify', action='store_true')
    parser.add_argument('--source', type=str)
    parser.add_argument('--implementation', type=str)
    parser.set_defaults(train=False,
                        resuming=False,
                        steps=None,
                        classify=False,
                        source=None,
                        implementation='pytorch')
    args = vars(parser.parse_args())
    return args


def main(cli_args):
    """
    Executes the program.

    Parameters:
        - cli_args (dict, str -> ?)
            - A dictionary converted from an `argparse.Namespace` object.
            - Maps CLI arguments to their values.
    """
    if cli_args['train']:
        training_prompt()
        if cli_args['implementation'] == 'pytorch':
            pyt_train.main(config.TRAIN_DIR,
                           config.LABEL_DICT,
                           cli_args['steps'],
                           config.SAVEPATH,
                           resuming=cli_args['resuming'])
        elif cli_args['implementation'] == 'tensorflow':
            tf_train.main(config.TRAIN_DIR,
                          config.LABEL_DICT,
                          cli_args['steps'],
                          config.SAVEPATH,
                          config.TENSORBOARD_DIR,
                          resuming=cli_args['resuming'])
    elif cli_args['classify']:
        if cli_args['implementation'] == 'pytorch':
            prediction = pyt_classify.main(cli_args['source'], config.SAVEPATH, config.LABEL_DICT)
        elif cli_args['implementation'] == 'tensorflow':
            prediction = tf_classify.main(cli_args['source'], config.SAVEPATH, config.LABEL_DICT)
        print_prediction(prediction)


if __name__ == '__main__':
    cli_args = parse_arguments()
    main(cli_args)
